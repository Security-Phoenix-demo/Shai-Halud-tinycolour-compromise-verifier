name: NPM Security Compromise Detection

on:
  # Trigger on push to main branches
  push:
    branches: [ main, master, develop ]
  
  # Trigger on pull requests
  pull_request:
    branches: [ main, master, develop ]
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to perform'
        required: true
        default: 'quick'
        type: choice
        options:
        - quick
        - enhanced
        - light-scan
        - phoenix-integration
      target_path:
        description: 'Path to scan (default: entire repository)'
        required: false
        default: '.'
      enable_phoenix:
        description: 'Enable Phoenix Security integration'
        required: false
        default: false
        type: boolean
  
  # Schedule daily scans at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'

env:
  # GitHub token for higher API rate limits (automatically provided)
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Phoenix API credentials (configure in repository secrets)
  PHOENIX_CLIENT_ID: ${{ secrets.PHOENIX_CLIENT_ID }}
  PHOENIX_CLIENT_SECRET: ${{ secrets.PHOENIX_CLIENT_SECRET }}
  PHOENIX_API_URL: ${{ secrets.PHOENIX_API_URL }}

jobs:
  # Quick security check job
  quick-security-check:
    name: Quick Security Check
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'quick' || github.event.inputs.scan_type == '' || github.event_name != 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
    
    - name: Make scripts executable
      run: |
        chmod +x quick-check-compromised-packages-2025.sh
        chmod +x local-security-check.sh
        chmod +x enhanced-quick-check-with-phoenix.sh
    
    - name: Run quick security check
      id: quick_scan
      run: |
        echo "🔍 Running quick NPM compromise detection..."
        ./quick-check-compromised-packages-2025.sh . || echo "SCAN_FAILED=true" >> $GITHUB_ENV
        echo "SCAN_COMPLETED=true" >> $GITHUB_ENV
    
    - name: Upload scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: quick-scan-results
        path: |
          *.txt
          *.json
        retention-days: 30
    
    - name: Comment on PR (if scan finds issues)
      if: github.event_name == 'pull_request' && env.SCAN_FAILED == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚨 **NPM Security Alert**: Compromised packages detected! Please review the security scan results in the workflow artifacts.'
          })

  # Enhanced security analysis job
  enhanced-security-analysis:
    name: Enhanced Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'enhanced' || github.event.inputs.scan_type == 'phoenix-integration'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests configparser
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
    
    - name: Make scripts executable
      run: |
        chmod +x enhanced-quick-check-with-phoenix.sh
        chmod +x quick-check-compromised-packages-2025.sh
    
    - name: Create Phoenix configuration (if Phoenix enabled)
      if: github.event.inputs.enable_phoenix == 'true' || github.event.inputs.scan_type == 'phoenix-integration'
      run: |
        if [ -n "$PHOENIX_CLIENT_ID" ] && [ -n "$PHOENIX_CLIENT_SECRET" ] && [ -n "$PHOENIX_API_URL" ]; then
          echo "Creating Phoenix configuration..."
          cat > .config << EOF
        [phoenix]
        client_id = $PHOENIX_CLIENT_ID
        client_secret = $PHOENIX_CLIENT_SECRET
        api_base_url = $PHOENIX_API_URL
        assessment_name = NPM Compromise Detection - GitHub Actions
        import_type = new
        EOF
          echo "PHOENIX_CONFIGURED=true" >> $GITHUB_ENV
        else
          echo "⚠️ Phoenix credentials not configured in repository secrets"
          echo "PHOENIX_CONFIGURED=false" >> $GITHUB_ENV
        fi
    
    - name: Run enhanced analysis with Phoenix
      if: env.PHOENIX_CONFIGURED == 'true'
      run: |
        echo "🚀 Running enhanced analysis with Phoenix integration..."
        python3 enhanced_npm_compromise_detector_phoenix.py \
          ${{ github.event.inputs.target_path || '.' }} \
          --enable-phoenix \
          --output "github-actions-security-report.txt" \
          --organize-folders \
          --debug
    
    - name: Run enhanced analysis (local only)
      if: env.PHOENIX_CONFIGURED != 'true'
      run: |
        echo "🔍 Running enhanced analysis (local report only)..."
        python3 enhanced_npm_compromise_detector_phoenix.py \
          ${{ github.event.inputs.target_path || '.' }} \
          --output "github-actions-security-report.txt" \
          --organize-folders
    
    - name: Upload analysis results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: enhanced-analysis-results
        path: |
          result/
          debug/
          github-actions-security-report.txt
          *.txt
          *.json
        retention-days: 30
    
    - name: Create security summary
      if: always()
      run: |
        echo "## 🛡️ NPM Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Type**: Enhanced Analysis" >> $GITHUB_STEP_SUMMARY
        echo "- **Target**: ${{ github.event.inputs.target_path || 'Entire repository' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Phoenix Integration**: ${{ env.PHOENIX_CONFIGURED }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "github-actions-security-report.txt" ]; then
          echo "### Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -20 github-actions-security-report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📄 Full report available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        fi

  # Light scan job for repository monitoring
  light-scan:
    name: Light Scan (NPM Files Only)
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'light-scan'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests configparser
    
    - name: Create repository list for current repo
      run: |
        echo "${{ github.server_url }}/${{ github.repository }}" > current_repo.txt
    
    - name: Run light scan
      run: |
        echo "🪶 Running light scan on current repository..."
        python3 enhanced_npm_compromise_detector_phoenix.py \
          --repo-list current_repo.txt \
          --light-scan \
          --output "light-scan-report.txt" \
          --organize-folders
    
    - name: Upload light scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: light-scan-results
        path: |
          result/
          light-scan-report.txt
          github-pull/
        retention-days: 30

  # Security gate job - fails if critical vulnerabilities found
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [quick-security-check, enhanced-security-analysis, light-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    
    - name: Check for critical findings
      run: |
        echo "🔍 Checking for critical security findings..."
        
        CRITICAL_FOUND=false
        
        # Check for critical findings in any report files
        for report in *.txt; do
          if [ -f "$report" ]; then
            if grep -q "CRITICAL\|🚨\|Compromised package detected" "$report"; then
              echo "❌ Critical security issues found in $report"
              CRITICAL_FOUND=true
            fi
          fi
        done
        
        if [ "$CRITICAL_FOUND" = "true" ]; then
          echo "SECURITY_GATE_FAILED=true" >> $GITHUB_ENV
          echo "## 🚨 Security Gate: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "Critical security vulnerabilities detected. Please review the scan results." >> $GITHUB_STEP_SUMMARY
        else
          echo "SECURITY_GATE_FAILED=false" >> $GITHUB_ENV
          echo "## ✅ Security Gate: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "No critical security vulnerabilities detected." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Fail workflow if critical issues found
      if: env.SECURITY_GATE_FAILED == 'true'
      run: |
        echo "🚨 Security gate failed due to critical vulnerabilities"
        exit 1

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [security-gate]
    if: always() && (github.event_name == 'schedule' || github.event_name == 'push')
    
    steps:
    - name: Send Slack notification (if configured)
      if: env.SECURITY_GATE_FAILED == 'true' && secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 NPM Security Alert: Critical vulnerabilities detected in ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Please review the security scan results immediately.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Create GitHub Issue (if critical findings and scheduled run)
      if: env.SECURITY_GATE_FAILED == 'true' && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 NPM Security Alert: Critical Vulnerabilities Detected',
            body: `## NPM Security Scan Alert
            
            Critical NPM package vulnerabilities have been detected in the scheduled security scan.
            
            **Details:**
            - Repository: ${context.repo.owner}/${context.repo.repo}
            - Branch: ${context.ref}
            - Scan Date: ${new Date().toISOString()}
            - Workflow Run: ${context.runNumber}
            
            **Action Required:**
            1. Review the security scan results in the [workflow artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. Update or remove compromised packages immediately
            3. Test your application thoroughly after updates
            
            **Artifacts:**
            Check the workflow run for detailed security reports and recommendations.
            
            This issue was created automatically by the NPM Security Scanner.`,
            labels: ['security', 'critical', 'npm-vulnerability']
          })